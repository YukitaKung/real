from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from tqdm import tqdm
from colorama import init, Fore, Style
import time
import datetime

# Initialize colorama for colored output
init(autoreset=True)

# Enhanced ASCII art for the header with Ez Tool branding
FANCY_HEADER = f"""
{Fore.CYAN}╔══════════════════════════════════════════════════╗
{Fore.CYAN}║  ███████╗███████╗    ████████╗ ██████╗  ██████╗║
{Fore.CYAN}║  ██╔════╝╚══███╔╝    ╚══██╔══╝██╔═══██╗██╔═══██╗║
{Fore.CYAN}║  █████╗    ███╔╝        ██║   ██║   ██║██║   ██║║
{Fore.CYAN}║  ██╔══╝   ███╔╝         ██║   ██║   ██║██║   ██║║
{Fore.CYAN}║  ███████╗███████╗       ██║   ╚██████╔╝╚██████╔╝║
{Fore.CYAN}║  ╚══════╝╚══════╝       ╚═╝    ╚═════╝  ╚═════╝ ║
{Fore.CYAN}╠══════════════════════════════════════════════════╣
{Fore.CYAN}║       🌟 R O B L O X   E M A I L   T O O L      ║
{Fore.CYAN}║            {Fore.MAGENTA}⚡ Ez Tool | PowerBy Yukita ⚡{Fore.CYAN}          ║
{Fore.CYAN}╚══════════════════════════════════════════════════╝
{Style.RESET_ALL}
"""

# Function to log messages with timestamp and style
def fancy_log(message, color=Fore.WHITE, log_file="log.txt"):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    styled_message = f"{Fore.MAGENTA}║ {timestamp} {color}{message}{Style.RESET_ALL}"
    print(styled_message)
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")

# Read cookies from user-provided file
def read_cookies(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            cookies = [line.strip() for line in f if line.strip()]
        valid_cookies = []
        for cookie in cookies:
            if cookie.startswith("_|WARNING:-DO-NOT-SHARE-THIS"):
                valid_cookies.append(cookie)
            else:
                fancy_log(f"⚠️ Invalid cookie format: {cookie[:50]}...", Fore.YELLOW)
        return valid_cookies
    except FileNotFoundError:
        fancy_log(f"🚨 Error: File {file_path} not found! Please check the path.", Fore.RED)
        return []
    except Exception as e:
        fancy_log(f"🚨 Error reading file: {str(e)}", Fore.RED)
        return []

# Print the fancy header
print(FANCY_HEADER)

# Prompt user to drag and drop the cookie file with better styling
print(f"\n{Fore.YELLOW}┌──────────────────────────────────────────────────┐")
print(f"{Fore.YELLOW}│ 🔥 Drag & drop your cookie file (.txt) below:       │")
print(f"{Fore.YELLOW}└──────────────────────────────────────────────────┘{Style.RESET_ALL}")
print(f"{Fore.CYAN}➤ Path: {Style.RESET_ALL}", end="")
cookie_file_path = input().strip().strip('"')

# Read cookies from the provided file
cookies = read_cookies(cookie_file_path)
if not cookies:
    fancy_log(f"\n{Fore.RED}┌──────────────────────────────────────────────────┐")
    fancy_log(f"{Fore.RED}│ 🚫 No valid cookies found. Exiting...             │")
    fancy_log(f"{Fore.RED}└──────────────────────────────────────────────────┘")
    exit()

total_accounts = len(cookies)
fancy_log(f"\n{Fore.GREEN}┌──────────────────────────────────────────────────┐")
fancy_log(f"{Fore.GREEN}│ 🎯 Found {total_accounts} accounts to process!           │")
fancy_log(f"{Fore.GREEN}└──────────────────────────────────────────────────┘")

# Initialize detail.txt with a fancy header
with open("detail.txt", "w", encoding="utf-8") as file:
    file.write(f"""{Fore.CYAN}
╔══════════════════════════════════════════════════╗
║          📋 Roblox Account Details 📋            ║
║           ⚡ Ez Tool | PowerBy Yukita ⚡          ║
╚══════════════════════════════════════════════════╝
{Style.RESET_ALL}\n\n""")

# Process each cookie
for idx, cookie_value in enumerate(cookies, 1):
    fancy_log(f"\n{Fore.YELLOW}┌──────────────────────────────────────────────────┐")
    fancy_log(f"{Fore.YELLOW}│ 🚀 Processing Account {idx}/{total_accounts}            │")
    fancy_log(f"{Fore.YELLOW}└──────────────────────────────────────────────────┘")

    # Set up Chrome Options
    chrome_options = Options()
    chrome_options.add_argument("--start-maximized")
    chrome_options.add_argument("--disable-notifications")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])

    # Create progress bar
    bar = tqdm(total=100, bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}]")
    bar.set_description(f"Account {idx}/{total_accounts} - Initial setup")
    bar.update(20)

    # Start WebDriver
    try:
        driver = webdriver.Chrome(options=chrome_options)
    except WebDriverException as e:
        fancy_log(f"🚨 Failed to start WebDriver: {str(e)}", Fore.RED)
        bar.close()
        continue

    # Step 1: Get email and password from mail.tm
    try:
        driver.get("https://mail.tm/en/")
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//*[@id="__nuxt"]/div[1]/div[2]/div/div/div[2]/button[3]'))
        )
        driver.find_element(By.XPATH, '//*[@id="__nuxt"]/div[1]/div[2]/div/div/div[2]/button[3]').click()
        bar.update(20)

        while True:
            email = driver.find_element(By.XPATH, '//*[@id="reka-dropdown-menu-content-v-1-9"]/div[1]/div/div/p[2]').text
            email_password = driver.find_element(By.XPATH, '//*[@id="reka-dropdown-menu-content-v-1-9"]/div[1]/div/div/p[3]/span').text
            if email != "..." and email_password != "...":
                break
            time.sleep(1)

        bar.set_description(f"Account {idx}/{total_accounts} - Email generated")
        bar.update(60)

        fancy_log(f"📧 Email: {email}", Fore.CYAN)
        fancy_log(f"🔑 Email Password: {email_password}", Fore.CYAN)
    except Exception as e:
        fancy_log(f"🚨 Failed to generate email: {str(e)}", Fore.RED)
        driver.quit()
        bar.close()
        continue

    # Step 2: Use cookie to log into Roblox
    roblox_cookie = {
        "name": ".ROBLOSECURITY",
        "value": cookie_value,
        "domain": ".roblox.com",
        "path": "/",
        "secure": True,
        "httpOnly": True
    }

    try:
        # Clear existing cookies to avoid conflicts
        driver.get("https://www.roblox.com")
        driver.delete_all_cookies()
        time.sleep(2)

        # Add the cookie
        driver.add_cookie(roblox_cookie)
        time.sleep(1)

        # Refresh the page to apply the cookie
        driver.refresh()
        time.sleep(3)

        # Go to account info page
        driver.get("https://www.roblox.com/my/account#!/info")
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, '//button[contains(text(), "Add Email")]'))
        )
        fancy_log("🔓 Login successful!", Fore.GREEN)
    except TimeoutException:
        fancy_log(f"❌ Failed to login with cookie for account {idx}. Skipping...", Fore.RED)
        driver.quit()
        bar.close()
        continue
    except Exception as e:
        fancy_log(f"🚨 Error during login: {str(e)}", Fore.RED)
        driver.quit()
        bar.close()
        continue

    # Step 3: Get username from HTML with retry mechanism
    username = "UnknownUser"
    max_retries = 3
    for attempt in range(max_retries):
        try:
            # Wait for the username element to be present
            username = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, '//span[@class="settings-text-span-visible"]'))
            ).text
            fancy_log(f"👤 Username: {username}", Fore.GREEN)
            break
        except TimeoutException:
            fancy_log(f"⚠️ Attempt {attempt + 1}/{max_retries}: Could not find username with class='settings-text-span-visible'. Retrying...", Fore.YELLOW)
            driver.refresh()
            time.sleep(3)
    else:
        fancy_log("❌ Failed to retrieve username after retries. Using default.", Fore.RED)

    # Step 4: Add email in Roblox
    try:
        add_email_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), "Add Email")]'))
        )
        add_email_button.click()
        time.sleep(2)

        email_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//input[@placeholder="Enter email"]'))
        )
        email_input.clear()
        email_input.send_keys(email)
        time.sleep(2)

        confirm_add_email_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((
                By.XPATH, 
                '//button[@class="modal-full-width-button btn-primary-md btn-min-width" and contains(text(), "Add Email")]'
            ))
        )

        driver.execute_script("arguments[0].scrollIntoView(true);", confirm_add_email_button)
        driver.execute_script("arguments[0].click();", confirm_add_email_button)
        time.sleep(3)

        fancy_log("✅ Email added successfully!", Fore.GREEN)
    except Exception as e:
        fancy_log(f"🚨 Failed to add email: {str(e)}", Fore.RED)
        driver.quit()
        bar.close()
        continue

    # Step 5: Save details to detail.txt
    try:
        with open("detail.txt", "a", encoding="utf-8") as file:
            file.write(f"Account {idx}:\n")
            file.write(f"Username: {username}\n")
            file.write(f"Email: {email}\n")
            file.write(f"Email Password: {email_password}\n")
            file.write("-" * 30 + "\n\n")
        fancy_log("💾 Saved details to detail.txt", Fore.BLUE)
    except Exception as e:
        fancy_log(f"🚨 Failed to save details: {str(e)}", Fore.RED)

    # Close the browser
    try:
        driver.quit()
    except:
        pass
    bar.close()

# Final log with enhanced visual
fancy_log(f"\n{Fore.CYAN}╔══════════════════════════════════════════════════╗")
fancy_log(f"{Fore.CYAN}║ 🎉 All {total_accounts} accounts processed successfully! 🎉 ║")
fancy_log(f"{Fore.CYAN}╚══════════════════════════════════════════════════╝")
fancy_log(f"{Fore.MAGENTA}┌──────────────────────────────────────────────────┐")
fancy_log(f"{Fore.MAGENTA}│ 📄 Check {Fore.CYAN}detail.txt{Fore.MAGENTA} for account details        │")
fancy_log(f"{Fore.MAGENTA}│ 📄 Check {Fore.CYAN}log.txt{Fore.MAGENTA} for full operation logs        │")
fancy_log(f"{Fore.MAGENTA}└──────────────────────────────────────────────────┘")
fancy_log(f"{Fore.YELLOW}┌──────────────────────────────────────────────────┐")
fancy_log(f"{Fore.YELLOW}│ ⚡ Ez Tool | PowerBy Yukita - Operation Complete ⚡ │")
fancy_log(f"{Fore.YELLOW}└──────────────────────────────────────────────────┘")
